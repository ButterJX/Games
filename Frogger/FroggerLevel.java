import java.util.Vector;
import java.awt.*;

public class FroggerLevel implements java.io.Serializable
{

	private int[] speeds;
	private int rowCount;
	private Vector<Car> carVector;
	
	private final int MIN_CAR_PADDING = 40; // minimum horizontal padding between cars on the same row

	public FroggerLevel(int[] speeds)
	{
		this.speeds = speeds;
		this.rowCount = speeds.length; // number of rows of traffic
		this.carVector = new Vector<Car>(); // this is where cars that are currently on the screen are stored
	}
	
	// called by FroggerLevelEngine at the start of each level
	public void initCars()
	{
		// adds just one initial car for each row
		// as the level continues, additional cars will be generated by this.updateCars(); which is called by FroggerLevelEngine each frame
		for(int row = 0; row < this.rowCount; ++row)
		{
			int xCoord;
			if(this.isRowMovingLeft(row))
			{
				xCoord = FroggerLevelEngine.WIDTH - Car.WIDTH - 10;
			} else {
				xCoord = 10;
			}
			carVector.add( new Car (xCoord, Car.getYCoordForRow(row), row, this.speeds[row], new Color(0, 0, 0)));
		}
	}
	
	private boolean isRowMovingLeft(int row)
	{
		return (row % 2) == 0;
	}
	
	// moves cars along the screen and generates new cars as necessary
	public void updateCars()
	{
		for(int car = 0; car < this.carVector.size(); ++car)
		{
			Car currentCar = this.carVector.get(car);
			if(this.isRowMovingLeft(currentCar.getRow()))
			{
				this.carVector.add(car,currentCar.moveLeft());
				this.carVector.remove(car + 1);
			} else {
				this.carVector.add(car,currentCar.moveRight());
				this.carVector.remove(car + 1);
			}
		}
	}
	
	public void drawCars(Graphics g)
	{
		for(int car = 0; car < this.carVector.size(); ++car)
		{
			this.carVector.get(car).draw(g);
		}
	}
	
	public int[] getSpeeds()
	{
		return speeds;
	}
}